%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.5 (Build 16F73) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 235 312
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 235 312
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
2 240.2063 m
156.70967 240.2063 l
156.70967 21.581661 l
2 21.581661 l
h
56 216.2063 m
102.70968 216.2063 l
119.27822 216.2063 132.70967 202.77484 132.70967 186.2063 c
132.70967 75.581665 l
132.70967 59.013119 119.27822 45.581661 102.70968 45.581661 c
56 45.581661 l
39.431458 45.581661 26 59.013119 26 75.581665 c
26 186.2063 l
26 202.77484 39.431458 216.2063 56 216.2063 c
h
56 220.2063 m
37.222317 220.2063 22 204.98398 22 186.2063 c
22 75.581665 l
22 56.803982 37.222317 41.581661 56 41.581661 c
102.70968 41.581661 l
121.48736 41.581661 136.70967 56.803982 136.70967 75.581665 c
136.70967 186.2063 l
136.70967 204.98398 121.48736 220.2063 102.70968 220.2063 c
56 220.2063 l
h
W*
56 218.2063 m
102.70968 218.2063 l
102.70968 218.2063 l
120.38279 218.2063 134.70967 203.87941 134.70967 186.2063 c
134.70967 75.581665 l
134.70967 75.581665 l
134.70967 57.90855 120.38279 43.581661 102.70968 43.581661 c
56 43.581661 l
56 43.581661 l
38.326889 43.581661 24 57.90855 24 75.581665 c
24 186.2063 l
24 186.2063 l
24 203.87941 38.326889 218.2063 56 218.2063 c
h
W*
0 0 235 312 rc
56 218.2063 m
102.70968 218.2063 l
102.70968 218.2063 l
120.38279 218.2063 134.70967 203.87941 134.70967 186.2063 c
134.70967 75.581665 l
134.70967 75.581665 l
134.70967 57.90855 120.38279 43.581661 102.70968 43.581661 c
56 43.581661 l
56 43.581661 l
38.326889 43.581661 24 57.90855 24 75.581665 c
24 186.2063 l
24 186.2063 l
24 203.87941 38.326889 218.2063 56 218.2063 c
h
f
Q
8 w
q
56 218.2063 m
102.70968 218.2063 l
102.70968 218.2063 l
120.38279 218.2063 134.70967 203.87941 134.70967 186.2063 c
134.70967 75.581665 l
134.70967 75.581665 l
134.70967 57.90855 120.38279 43.581661 102.70968 43.581661 c
56 43.581661 l
56 43.581661 l
38.326889 43.581661 24 57.90855 24 75.581665 c
24 186.2063 l
24 186.2063 l
24 203.87941 38.326889 218.2063 56 218.2063 c
h
W*
0 0 235 312 rc
1 0 0 -1 24 218.2063 cm
32 0 m
78.709679 0 l
78.709679 0 l
96.38279 0 110.70968 14.326888 110.70968 32 c
110.70968 142.62465 l
110.70968 142.62465 l
110.70968 160.29776 96.38279 174.62465 78.709679 174.62465 c
32 174.62465 l
32 174.62465 l
14.326888 174.62465 0 160.29776 0 142.62465 c
0 32 l
0 32 l
0 14.326888 14.326888 0 32 0 c
h
S
Q
1 1 1 sc
q
48.741936 187.9828 m
48.741936 187.9828 l
48.741936 187.9828 l
52.679192 187.9828 55.870968 184.79103 55.870968 180.85378 c
55.870968 80.934189 l
55.870968 80.934189 l
55.870968 76.996933 52.679192 73.805161 48.741936 73.805161 c
48.741936 73.805161 l
48.741936 73.805161 l
44.80468 73.805161 41.612904 76.996933 41.612904 80.934189 c
41.612904 180.85378 l
41.612904 180.85378 l
41.612904 184.79103 44.80468 187.9828 48.741936 187.9828 c
h
W*
0 0 235 312 rc
36.612904 192.9828 m
60.870968 192.9828 l
60.870968 68.805161 l
36.612904 68.805161 l
h
f
Q
q
76.419357 187.9828 m
76.419357 187.9828 l
76.419357 187.9828 l
80.356613 187.9828 83.548386 184.79103 83.548386 180.85378 c
83.548386 80.934189 l
83.548386 80.934189 l
83.548386 76.996933 80.356613 73.805161 76.419357 73.805161 c
76.419357 73.805161 l
76.419357 73.805161 l
72.482101 73.805161 69.290321 76.996933 69.290321 80.934189 c
69.290321 180.85378 l
69.290321 180.85378 l
69.290321 184.79103 72.482101 187.9828 76.419357 187.9828 c
h
W*
0 0 235 312 rc
64.290321 192.9828 m
88.548386 192.9828 l
88.548386 68.805161 l
64.290321 68.805161 l
h
f
Q
q
49.80645 236.84814 m
110.58064 236.84814 l
110.58064 176.05731 l
49.80645 176.05731 l
h
80.19355 196.05731 m
85.930626 196.05731 90.580643 200.71193 90.580643 206.45273 c
90.580643 212.19351 85.930626 216.84814 80.19355 216.84814 c
74.456467 216.84814 69.80645 212.19351 69.80645 206.45273 c
69.80645 200.71193 74.456467 196.05731 80.19355 196.05731 c
h
80.19355 200.05731 m
76.666496 200.05731 73.80645 202.92018 73.80645 206.45273 c
73.80645 209.98526 76.666496 212.84814 80.19355 212.84814 c
83.720604 212.84814 86.580643 209.98526 86.580643 206.45273 c
86.580643 202.92018 83.720604 200.05731 80.19355 200.05731 c
h
W*
80.19355 198.05731 m
84.825615 198.05731 88.580643 201.81606 88.580643 206.45273 c
88.580643 211.08939 84.825615 214.84814 80.19355 214.84814 c
75.561485 214.84814 71.80645 211.08939 71.80645 206.45273 c
71.80645 201.81606 75.561485 198.05731 80.19355 198.05731 c
h
W*
0 0 235 312 rc
80.19355 198.05731 m
84.825615 198.05731 88.580643 201.81606 88.580643 206.45273 c
88.580643 211.08939 84.825615 214.84814 80.19355 214.84814 c
75.561485 214.84814 71.80645 211.08939 71.80645 206.45273 c
71.80645 201.81606 75.561485 198.05731 80.19355 198.05731 c
h
f
Q
q
80.19355 198.05731 m
84.825615 198.05731 88.580643 201.81606 88.580643 206.45273 c
88.580643 211.08939 84.825615 214.84814 80.19355 214.84814 c
75.561485 214.84814 71.80645 211.08939 71.80645 206.45273 c
71.80645 201.81606 75.561485 198.05731 80.19355 198.05731 c
h
W*
0 0 235 312 rc
1 0 0 -1 71.80645 214.84814 cm
8.3870964 16.790831 m
13.019162 16.790831 16.774193 13.032076 16.774193 8.3954153 c
16.774193 3.7587554 13.019162 0 8.3870964 0 c
3.7550311 0 0 3.7587554 0 8.3954153 c
0 13.032076 3.7550311 16.790831 8.3870964 16.790831 c
h
S
Q
0 0 0 sc
q
80.917587 235.49269 m
233.38153 205.8567 l
190.87189 -12.836432 l
38.407948 16.799555 l
h
132.201 200.03044 m
175.95178 189.62869 l
191.33997 185.97014 201.10439 170.82632 198.08635 155.2998 c
176.7303 45.432476 l
173.62157 29.439411 158.13649 18.994602 142.14343 22.103338 c
96.676857 30.941145 l
80.683792 34.049881 70.238983 49.53495 73.347717 65.528015 c
73.370567 65.645569 73.394135 65.762993 73.418419 65.880264 c
96.490273 177.31155 l
99.793549 193.26556 115.40467 203.52101 131.35869 200.21773 c
131.64037 200.15941 131.92116 200.09698 132.201 200.03044 c
h
133.35751 204.89485 m
133.03024 204.97266 132.70184 205.04568 132.37244 205.11389 c
113.71435 208.97705 95.457275 196.98338 91.594116 178.3253 c
68.522263 66.894012 l
68.493866 66.756866 68.466309 66.619545 68.439583 66.482056 c
64.80394 47.778305 77.019058 29.66865 95.722809 26.033009 c
141.18938 17.195202 l
159.89313 13.559561 178.00279 25.774677 181.63843 44.478428 c
202.99448 154.34576 l
206.52406 172.50391 195.10464 190.21446 177.10829 194.4931 c
133.35751 204.89485 l
h
W*
132.77927 202.46265 m
176.53003 192.0609 l
176.53003 192.0609 l
193.22231 188.0923 203.81422 171.66512 200.54041 154.82278 c
179.18436 44.955452 l
179.18436 44.955452 l
175.81218 27.607044 159.01482 16.277081 141.66641 19.649269 c
96.199829 28.487078 l
96.199829 28.487078 l
78.851425 31.859266 67.521461 48.656628 70.893646 66.005035 c
70.918434 66.132561 70.944 66.259926 70.970345 66.387138 c
94.042191 177.81842 l
94.042191 177.81842 l
97.625412 195.12448 114.55951 206.24902 131.86557 202.66582 c
132.17111 202.60255 132.47571 202.53482 132.77927 202.46265 c
h
W*
0 0 235 312 rc
132.77927 202.46265 m
176.53003 192.0609 l
176.53003 192.0609 l
193.22231 188.0923 203.81422 171.66512 200.54041 154.82278 c
179.18436 44.955452 l
179.18436 44.955452 l
175.81218 27.607044 159.01482 16.277081 141.66641 19.649269 c
96.199829 28.487078 l
96.199829 28.487078 l
78.851425 31.859266 67.521461 48.656628 70.893646 66.005035 c
70.918434 66.132561 70.944 66.259926 70.970345 66.387138 c
94.042191 177.81842 l
94.042191 177.81842 l
97.625412 195.12448 114.55951 206.24902 131.86557 202.66582 c
132.17111 202.60255 132.47571 202.53482 132.77927 202.46265 c
h
f
Q
10 w
1 1 1 sc
q
132.77927 202.46265 m
176.53003 192.0609 l
176.53003 192.0609 l
193.22231 188.0923 203.81422 171.66512 200.54041 154.82278 c
179.18436 44.955452 l
179.18436 44.955452 l
175.81218 27.607044 159.01482 16.277081 141.66641 19.649269 c
96.199829 28.487078 l
96.199829 28.487078 l
78.851425 31.859266 67.521461 48.656628 70.893646 66.005035 c
70.918434 66.132561 70.944 66.259926 70.970345 66.387138 c
94.042191 177.81842 l
94.042191 177.81842 l
97.625412 195.12448 114.55951 206.24902 131.86557 202.66582 c
132.17111 202.60255 132.47571 202.53482 132.77927 202.46265 c
h
W*
0 0 235 312 rc
0.98162717 -0.190809 -0.190809 -0.98162717 98.710999 209.11287 cm
34.711262 0.02750954 m
79.642952 1.8901139 l
79.642952 1.8901139 l
96.785789 2.6007555 110.31756 16.705095 110.31756 33.862656 c
110.31756 145.78635 l
110.31756 145.78635 l
110.31756 163.45946 95.990669 177.78635 78.317558 177.78635 c
32 177.78635 l
32 177.78635 l
14.326888 177.78635 0 163.45946 0 145.78635 c
0 145.65643 0.00079108169 145.52654 0.0023732011 145.39662 c
1.3882397 31.610332 l
1.3882397 31.610332 l
1.6034744 13.938532 16.103783 -0.21281168 33.775585 0.0024230024 c
34.087582 0.0062229997 34.399506 0.014586073 34.711262 0.02750954 c
h
S
Q
q
116.24324 171.69489 m
116.24324 171.69489 l
116.24324 171.69489 l
120.10816 170.94363 122.63227 167.20148 121.88101 163.33656 c
102.81545 65.252777 l
102.81545 65.252777 l
102.06419 61.387856 98.322037 58.863743 94.457115 59.615005 c
94.457115 59.615005 l
94.457115 59.615005 l
90.592201 60.366268 88.068085 64.108421 88.819351 67.973343 c
107.8849 166.05713 l
107.8849 166.05713 l
108.63617 169.92204 112.37833 172.44615 116.24324 171.69489 c
h
W*
0 0 235 312 rc
105.2911 178.91736 m
129.10347 174.2887 l
105.40926 52.39254 l
81.596886 57.021198 l
h
f
Q
q
143.41216 166.41379 m
143.41216 166.41379 l
143.41216 166.41379 l
147.27707 165.66252 149.80118 161.92038 149.04991 158.05545 c
129.98436 59.971672 l
129.98436 59.971672 l
129.23309 56.106754 125.49094 53.582642 121.62602 54.333904 c
121.62602 54.333904 l
121.62602 54.333904 l
117.76111 55.085167 115.23699 58.827324 115.98826 62.692242 c
135.05382 160.77602 l
135.05382 160.77602 l
135.80508 164.64095 139.54723 167.16505 143.41216 166.41379 c
h
W*
0 0 235 312 rc
132.46001 173.63626 m
156.27238 169.0076 l
132.57817 47.111439 l
108.76579 51.740097 l
h
f
Q
q
170.58105 161.13269 m
170.58105 161.13269 l
170.58105 161.13269 l
174.44597 160.38142 176.97009 156.63927 176.21883 152.77435 c
157.15327 54.690575 l
157.15327 54.690575 l
156.40201 50.825657 152.65985 48.30154 148.79494 49.052803 c
148.79494 49.052803 l
148.79494 49.052803 l
144.93001 49.80407 142.4059 53.546223 143.15717 57.41114 c
162.22272 155.49492 l
162.22272 155.49492 l
162.97398 159.35983 166.71614 161.88396 170.58105 161.13269 c
h
W*
0 0 235 312 rc
159.62891 168.35515 m
183.44128 163.7265 l
159.74707 41.830341 l
135.93471 46.458996 l
h
f
Q
q
147.46384 172.89851 m
152.01079 172.01468 156.41405 174.98788 157.29875 179.53935 c
158.18347 184.09082 155.21463 188.49701 150.66768 189.38084 c
146.12071 190.26469 141.71747 187.29149 140.83275 182.74002 c
139.94803 178.18854 142.91687 173.78235 147.46384 172.89851 c
h
W*
0 0 235 312 rc
138.48058 196.84337 m
164.76286 191.7346 l
159.65092 165.436 l
133.36865 170.54475 l
h
f
Q
q
122.77419 229.29227 m
176 229.29227 l
176 176.05731 l
122.77419 176.05731 l
h
149.3871 196.05731 m
153.03975 196.05731 156 199.02049 156 202.67479 c
156 206.32907 153.03975 209.29227 149.3871 209.29227 c
145.73445 209.29227 142.7742 206.32907 142.7742 202.67479 c
142.7742 199.02049 145.73445 196.05731 149.3871 196.05731 c
h
149.3871 200.05731 m
147.94447 200.05731 146.7742 201.22874 146.7742 202.67479 c
146.7742 204.12082 147.94447 205.29227 149.3871 205.29227 c
150.82971 205.29227 152 204.12082 152 202.67479 c
152 201.22874 150.82971 200.05731 149.3871 200.05731 c
h
W*
149.3871 198.05731 m
151.93474 198.05731 154 200.12462 154 202.67479 c
154 205.22495 151.93474 207.29227 149.3871 207.29227 c
146.83946 207.29227 144.7742 205.22495 144.7742 202.67479 c
144.7742 200.12462 146.83946 198.05731 149.3871 198.05731 c
h
W*
0 0 235 312 rc
149.3871 198.05731 m
151.93474 198.05731 154 200.12462 154 202.67479 c
154 205.22495 151.93474 207.29227 149.3871 207.29227 c
146.83946 207.29227 144.7742 205.22495 144.7742 202.67479 c
144.7742 200.12462 146.83946 198.05731 149.3871 198.05731 c
h
f
Q
8 w
0 0 0 sc
q
149.3871 198.05731 m
151.93474 198.05731 154 200.12462 154 202.67479 c
154 205.22495 151.93474 207.29227 149.3871 207.29227 c
146.83946 207.29227 144.7742 205.22495 144.7742 202.67479 c
144.7742 200.12462 146.83946 198.05731 149.3871 198.05731 c
h
W*
0 0 235 312 rc
1 0 0 -1 144.7742 207.29227 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
127.80645 248.60172 m
181.03226 248.60172 l
181.03226 195.36676 l
127.80645 195.36676 l
h
154.41936 215.36676 m
158.07201 215.36676 161.03226 218.32996 161.03226 221.98424 c
161.03226 225.63853 158.07201 228.60172 154.41936 228.60172 c
150.76671 228.60172 147.80646 225.63853 147.80646 221.98424 c
147.80646 218.32996 150.76671 215.36676 154.41936 215.36676 c
h
154.41936 219.36676 m
152.97673 219.36676 151.80646 220.53821 151.80646 221.98424 c
151.80646 223.43028 152.97673 224.60172 154.41936 224.60172 c
155.86198 224.60172 157.03226 223.43028 157.03226 221.98424 c
157.03226 220.53821 155.86198 219.36676 154.41936 219.36676 c
h
W*
154.41936 217.36676 m
156.967 217.36676 159.03226 219.43408 159.03226 221.98424 c
159.03226 224.53441 156.967 226.60172 154.41936 226.60172 c
151.87172 226.60172 149.80646 224.53441 149.80646 221.98424 c
149.80646 219.43408 151.87172 217.36676 154.41936 217.36676 c
h
W*
0 0 235 312 rc
154.41936 217.36676 m
156.967 217.36676 159.03226 219.43408 159.03226 221.98424 c
159.03226 224.53441 156.967 226.60172 154.41936 226.60172 c
151.87172 226.60172 149.80646 224.53441 149.80646 221.98424 c
149.80646 219.43408 151.87172 217.36676 154.41936 217.36676 c
h
f
Q
0 0 0 sc
q
154.41936 217.36676 m
156.967 217.36676 159.03226 219.43408 159.03226 221.98424 c
159.03226 224.53441 156.967 226.60172 154.41936 226.60172 c
151.87172 226.60172 149.80646 224.53441 149.80646 221.98424 c
149.80646 219.43408 151.87172 217.36676 154.41936 217.36676 c
h
W*
0 0 235 312 rc
1 0 0 -1 149.80646 226.60172 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
132.83871 265.39255 m
186.06451 265.39255 l
186.06451 212.15759 l
132.83871 212.15759 l
h
159.45161 232.15759 m
163.10426 232.15759 166.06451 235.12079 166.06451 238.77507 c
166.06451 242.42937 163.10426 245.39255 159.45161 245.39255 c
155.79897 245.39255 152.83871 242.42937 152.83871 238.77507 c
152.83871 235.12079 155.79897 232.15759 159.45161 232.15759 c
h
159.45161 236.15759 m
158.00899 236.15759 156.83871 237.32904 156.83871 238.77507 c
156.83871 240.22112 158.00899 241.39255 159.45161 241.39255 c
160.89424 241.39255 162.06451 240.22112 162.06451 238.77507 c
162.06451 237.32904 160.89424 236.15759 159.45161 236.15759 c
h
W*
159.45161 234.15759 m
161.99925 234.15759 164.06451 236.22491 164.06451 238.77507 c
164.06451 241.32524 161.99925 243.39255 159.45161 243.39255 c
156.90398 243.39255 154.83871 241.32524 154.83871 238.77507 c
154.83871 236.22491 156.90398 234.15759 159.45161 234.15759 c
h
W*
0 0 235 312 rc
159.45161 234.15759 m
161.99925 234.15759 164.06451 236.22491 164.06451 238.77507 c
164.06451 241.32524 161.99925 243.39255 159.45161 243.39255 c
156.90398 243.39255 154.83871 241.32524 154.83871 238.77507 c
154.83871 236.22491 156.90398 234.15759 159.45161 234.15759 c
h
f
Q
0 0 0 sc
q
159.45161 234.15759 m
161.99925 234.15759 164.06451 236.22491 164.06451 238.77507 c
164.06451 241.32524 161.99925 243.39255 159.45161 243.39255 c
156.90398 243.39255 154.83871 241.32524 154.83871 238.77507 c
154.83871 236.22491 156.90398 234.15759 159.45161 234.15759 c
h
W*
0 0 235 312 rc
1 0 0 -1 154.83871 243.39255 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
66.580643 313.24643 m
119.80645 313.24643 l
119.80645 260.01147 l
66.580643 260.01147 l
h
93.19355 280.01147 m
96.846199 280.01147 99.80645 282.97464 99.80645 286.62894 c
99.80645 290.28323 96.846199 293.24643 93.19355 293.24643 c
89.540901 293.24643 86.580643 290.28323 86.580643 286.62894 c
86.580643 282.97464 89.540901 280.01147 93.19355 280.01147 c
h
93.19355 284.01147 m
91.750923 284.01147 90.580643 285.18289 90.580643 286.62894 c
90.580643 288.07498 91.750923 289.24643 93.19355 289.24643 c
94.636169 289.24643 95.80645 288.07498 95.80645 286.62894 c
95.80645 285.18289 94.636169 284.01147 93.19355 284.01147 c
h
W*
93.19355 282.01147 m
95.741188 282.01147 97.80645 284.07877 97.80645 286.62894 c
97.80645 289.17911 95.741188 291.24643 93.19355 291.24643 c
90.645912 291.24643 88.580643 289.17911 88.580643 286.62894 c
88.580643 284.07877 90.645912 282.01147 93.19355 282.01147 c
h
W*
0 0 235 312 rc
93.19355 282.01147 m
95.741188 282.01147 97.80645 284.07877 97.80645 286.62894 c
97.80645 289.17911 95.741188 291.24643 93.19355 291.24643 c
90.645912 291.24643 88.580643 289.17911 88.580643 286.62894 c
88.580643 284.07877 90.645912 282.01147 93.19355 282.01147 c
h
f
Q
0 0 0 sc
q
93.19355 282.01147 m
95.741188 282.01147 97.80645 284.07877 97.80645 286.62894 c
97.80645 289.17911 95.741188 291.24643 93.19355 291.24643 c
90.645912 291.24643 88.580643 289.17911 88.580643 286.62894 c
88.580643 284.07877 90.645912 282.01147 93.19355 282.01147 c
h
W*
0 0 235 312 rc
1 0 0 -1 88.580643 291.24643 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
88.3871 320.80231 m
141.6129 320.80231 l
141.6129 267.56732 l
88.3871 267.56732 l
h
115 287.56732 m
118.65265 287.56732 121.6129 290.53052 121.6129 294.18481 c
121.6129 297.83911 118.65265 300.80231 115 300.80231 c
111.34735 300.80231 108.3871 297.83911 108.3871 294.18481 c
108.3871 290.53052 111.34735 287.56732 115 287.56732 c
h
115 291.56732 m
113.55738 291.56732 112.3871 292.73877 112.3871 294.18481 c
112.3871 295.63086 113.55738 296.80231 115 296.80231 c
116.44262 296.80231 117.6129 295.63086 117.6129 294.18481 c
117.6129 292.73877 116.44262 291.56732 115 291.56732 c
h
W*
115 289.56732 m
117.54764 289.56732 119.6129 291.63464 119.6129 294.18481 c
119.6129 296.73499 117.54764 298.80231 115 298.80231 c
112.45236 298.80231 110.3871 296.73499 110.3871 294.18481 c
110.3871 291.63464 112.45236 289.56732 115 289.56732 c
h
W*
0 0 235 312 rc
115 289.56732 m
117.54764 289.56732 119.6129 291.63464 119.6129 294.18481 c
119.6129 296.73499 117.54764 298.80231 115 298.80231 c
112.45236 298.80231 110.3871 296.73499 110.3871 294.18481 c
110.3871 291.63464 112.45236 289.56732 115 289.56732 c
h
f
Q
0 0 0 sc
q
115 289.56732 m
117.54764 289.56732 119.6129 291.63464 119.6129 294.18481 c
119.6129 296.73499 117.54764 298.80231 115 298.80231 c
112.45236 298.80231 110.3871 296.73499 110.3871 294.18481 c
110.3871 291.63464 112.45236 289.56732 115 289.56732 c
h
W*
0 0 235 312 rc
1 0 0 -1 110.3871 298.80231 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
107.67742 325 m
160.90323 325 l
160.90323 271.76505 l
107.67742 271.76505 l
h
134.29033 291.76505 m
137.94298 291.76505 140.90323 294.72824 140.90323 298.38251 c
140.90323 302.0368 137.94298 305 134.29033 305 c
130.63768 305 127.67742 302.0368 127.67742 298.38251 c
127.67742 294.72824 130.63768 291.76505 134.29033 291.76505 c
h
134.29033 295.76505 m
132.8477 295.76505 131.67741 296.93649 131.67741 298.38251 c
131.67741 299.82855 132.8477 301 134.29033 301 c
135.73294 301 136.90323 299.82855 136.90323 298.38251 c
136.90323 296.93649 135.73294 295.76505 134.29033 295.76505 c
h
W*
134.29033 293.76505 m
136.83795 293.76505 138.90323 295.83237 138.90323 298.38251 c
138.90323 300.93268 136.83795 303 134.29033 303 c
131.74269 303 129.67741 300.93268 129.67741 298.38251 c
129.67741 295.83237 131.74269 293.76505 134.29033 293.76505 c
h
W*
0 0 235 312 rc
134.29033 293.76505 m
136.83795 293.76505 138.90323 295.83237 138.90323 298.38251 c
138.90323 300.93268 136.83795 303 134.29033 303 c
131.74269 303 129.67741 300.93268 129.67741 298.38251 c
129.67741 295.83237 131.74269 293.76505 134.29033 293.76505 c
h
f
Q
0 0 0 sc
q
134.29033 293.76505 m
136.83795 293.76505 138.90323 295.83237 138.90323 298.38251 c
138.90323 300.93268 136.83795 303 134.29033 303 c
131.74269 303 129.67741 300.93268 129.67741 298.38251 c
129.67741 295.83237 131.74269 293.76505 134.29033 293.76505 c
h
W*
0 0 235 312 rc
1 0 0 -1 129.67741 303 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
126.96774 317.44412 m
180.19354 317.44412 l
180.19354 264.20917 l
126.96774 264.20917 l
h
153.58064 284.20917 m
157.23329 284.20917 160.19354 287.17236 160.19354 290.82666 c
160.19354 294.48093 157.23329 297.44412 153.58064 297.44412 c
149.92799 297.44412 146.96774 294.48093 146.96774 290.82666 c
146.96774 287.17236 149.92799 284.20917 153.58064 284.20917 c
h
153.58064 288.20917 m
152.13802 288.20917 150.96774 289.38062 150.96774 290.82666 c
150.96774 292.27267 152.13802 293.44412 153.58064 293.44412 c
155.02327 293.44412 156.19354 292.27267 156.19354 290.82666 c
156.19354 289.38062 155.02327 288.20917 153.58064 288.20917 c
h
W*
153.58064 286.20917 m
156.12828 286.20917 158.19354 288.27649 158.19354 290.82666 c
158.19354 293.3768 156.12828 295.44412 153.58064 295.44412 c
151.033 295.44412 148.96774 293.3768 148.96774 290.82666 c
148.96774 288.27649 151.033 286.20917 153.58064 286.20917 c
h
W*
0 0 235 312 rc
153.58064 286.20917 m
156.12828 286.20917 158.19354 288.27649 158.19354 290.82666 c
158.19354 293.3768 156.12828 295.44412 153.58064 295.44412 c
151.033 295.44412 148.96774 293.3768 148.96774 290.82666 c
148.96774 288.27649 151.033 286.20917 153.58064 286.20917 c
h
f
Q
0 0 0 sc
q
153.58064 286.20917 m
156.12828 286.20917 158.19354 288.27649 158.19354 290.82666 c
158.19354 293.3768 156.12828 295.44412 153.58064 295.44412 c
151.033 295.44412 148.96774 293.3768 148.96774 290.82666 c
148.96774 288.27649 151.033 286.20917 153.58064 286.20917 c
h
W*
0 0 235 312 rc
1 0 0 -1 148.96774 295.44412 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
132.83871 299.81375 m
186.06451 299.81375 l
186.06451 246.5788 l
132.83871 246.5788 l
h
159.45161 266.5788 m
163.10426 266.5788 166.06451 269.54199 166.06451 273.19629 c
166.06451 276.85056 163.10426 279.81375 159.45161 279.81375 c
155.79897 279.81375 152.83871 276.85056 152.83871 273.19629 c
152.83871 269.54199 155.79897 266.5788 159.45161 266.5788 c
h
159.45161 270.5788 m
158.00899 270.5788 156.83871 271.75024 156.83871 273.19629 c
156.83871 274.6423 158.00899 275.81375 159.45161 275.81375 c
160.89424 275.81375 162.06451 274.6423 162.06451 273.19629 c
162.06451 271.75024 160.89424 270.5788 159.45161 270.5788 c
h
W*
159.45161 268.5788 m
161.99925 268.5788 164.06451 270.64612 164.06451 273.19629 c
164.06451 275.74643 161.99925 277.81375 159.45161 277.81375 c
156.90398 277.81375 154.83871 275.74643 154.83871 273.19629 c
154.83871 270.64612 156.90398 268.5788 159.45161 268.5788 c
h
W*
0 0 235 312 rc
159.45161 268.5788 m
161.99925 268.5788 164.06451 270.64612 164.06451 273.19629 c
164.06451 275.74643 161.99925 277.81375 159.45161 277.81375 c
156.90398 277.81375 154.83871 275.74643 154.83871 273.19629 c
154.83871 270.64612 156.90398 268.5788 159.45161 268.5788 c
h
f
Q
0 0 0 sc
q
159.45161 268.5788 m
161.99925 268.5788 164.06451 270.64612 164.06451 273.19629 c
164.06451 275.74643 161.99925 277.81375 159.45161 277.81375 c
156.90398 277.81375 154.83871 275.74643 154.83871 273.19629 c
154.83871 270.64612 156.90398 268.5788 159.45161 268.5788 c
h
W*
0 0 235 312 rc
1 0 0 -1 154.83871 277.81375 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
136.19354 283.86246 m
189.41936 283.86246 l
189.41936 230.6275 l
136.19354 230.6275 l
h
162.80646 250.6275 m
166.45911 250.6275 169.41936 253.5907 169.41936 257.245 c
169.41936 260.89926 166.45911 263.86246 162.80646 263.86246 c
159.15381 263.86246 156.19354 260.89926 156.19354 257.245 c
156.19354 253.5907 159.15381 250.6275 162.80646 250.6275 c
h
162.80646 254.6275 m
161.36383 254.6275 160.19354 255.79895 160.19354 257.245 c
160.19354 258.69101 161.36383 259.86246 162.80646 259.86246 c
164.24907 259.86246 165.41936 258.69101 165.41936 257.245 c
165.41936 255.79895 164.24907 254.6275 162.80646 254.6275 c
h
W*
162.80646 252.6275 m
165.35408 252.6275 167.41936 254.69482 167.41936 257.245 c
167.41936 259.79514 165.35408 261.86246 162.80646 261.86246 c
160.25882 261.86246 158.19354 259.79514 158.19354 257.245 c
158.19354 254.69482 160.25882 252.6275 162.80646 252.6275 c
h
W*
0 0 235 312 rc
162.80646 252.6275 m
165.35408 252.6275 167.41936 254.69482 167.41936 257.245 c
167.41936 259.79514 165.35408 261.86246 162.80646 261.86246 c
160.25882 261.86246 158.19354 259.79514 158.19354 257.245 c
158.19354 254.69482 160.25882 252.6275 162.80646 252.6275 c
h
f
Q
0 0 0 sc
q
162.80646 252.6275 m
165.35408 252.6275 167.41936 254.69482 167.41936 257.245 c
167.41936 259.79514 165.35408 261.86246 162.80646 261.86246 c
160.25882 261.86246 158.19354 259.79514 158.19354 257.245 c
158.19354 254.69482 160.25882 252.6275 162.80646 252.6275 c
h
W*
0 0 235 312 rc
1 0 0 -1 158.19354 261.86246 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
54 252.79942 m
107.22581 252.79942 l
107.22581 199.56447 l
54 199.56447 l
h
80.6129 219.56447 m
84.265556 219.56447 87.225807 222.52766 87.225807 226.18195 c
87.225807 229.83624 84.265556 232.79942 80.6129 232.79942 c
76.960251 232.79942 74 229.83624 74 226.18195 c
74 222.52766 76.960251 219.56447 80.6129 219.56447 c
h
80.6129 223.56447 m
79.17028 223.56447 78 224.73592 78 226.18195 c
78 227.62799 79.17028 228.79942 80.6129 228.79942 c
82.055527 228.79942 83.225807 227.62799 83.225807 226.18195 c
83.225807 224.73592 82.055527 223.56447 80.6129 223.56447 c
h
W*
80.6129 221.56447 m
83.160538 221.56447 85.225807 223.63179 85.225807 226.18195 c
85.225807 228.73212 83.160538 230.79942 80.6129 230.79942 c
78.065269 230.79942 76 228.73212 76 226.18195 c
76 223.63179 78.065269 221.56447 80.6129 221.56447 c
h
W*
0 0 235 312 rc
80.6129 221.56447 m
83.160538 221.56447 85.225807 223.63179 85.225807 226.18195 c
85.225807 228.73212 83.160538 230.79942 80.6129 230.79942 c
78.065269 230.79942 76 228.73212 76 226.18195 c
76 223.63179 78.065269 221.56447 80.6129 221.56447 c
h
f
Q
0 0 0 sc
q
80.6129 221.56447 m
83.160538 221.56447 85.225807 223.63179 85.225807 226.18195 c
85.225807 228.73212 83.160538 230.79942 80.6129 230.79942 c
78.065269 230.79942 76 228.73212 76 226.18195 c
76 223.63179 78.065269 221.56447 80.6129 221.56447 c
h
W*
0 0 235 312 rc
1 0 0 -1 76 230.79942 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
53.161289 274.6275 m
106.3871 274.6275 l
106.3871 221.39255 l
53.161289 221.39255 l
h
79.774193 241.39255 m
83.426842 241.39255 86.3871 244.35574 86.3871 248.01003 c
86.3871 251.66432 83.426842 254.6275 79.774193 254.6275 c
76.121544 254.6275 73.161293 251.66432 73.161293 248.01003 c
73.161293 244.35574 76.121544 241.39255 79.774193 241.39255 c
h
79.774193 245.39255 m
78.331573 245.39255 77.161293 246.564 77.161293 248.01003 c
77.161293 249.45607 78.331573 250.6275 79.774193 250.6275 c
81.21682 250.6275 82.3871 249.45607 82.3871 248.01003 c
82.3871 246.564 81.21682 245.39255 79.774193 245.39255 c
h
W*
79.774193 243.39255 m
82.321831 243.39255 84.3871 245.45987 84.3871 248.01003 c
84.3871 250.5602 82.321831 252.6275 79.774193 252.6275 c
77.226555 252.6275 75.161293 250.5602 75.161293 248.01003 c
75.161293 245.45987 77.226555 243.39255 79.774193 243.39255 c
h
W*
0 0 235 312 rc
79.774193 243.39255 m
82.321831 243.39255 84.3871 245.45987 84.3871 248.01003 c
84.3871 250.5602 82.321831 252.6275 79.774193 252.6275 c
77.226555 252.6275 75.161293 250.5602 75.161293 248.01003 c
75.161293 245.45987 77.226555 243.39255 79.774193 243.39255 c
h
f
Q
0 0 0 sc
q
79.774193 243.39255 m
82.321831 243.39255 84.3871 245.45987 84.3871 248.01003 c
84.3871 250.5602 82.321831 252.6275 79.774193 252.6275 c
77.226555 252.6275 75.161293 250.5602 75.161293 248.01003 c
75.161293 245.45987 77.226555 243.39255 79.774193 243.39255 c
h
W*
0 0 235 312 rc
1 0 0 -1 75.161293 252.6275 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
Q
1 1 1 sc
q
53.161289 295.61606 m
106.3871 295.61606 l
106.3871 242.38109 l
53.161289 242.38109 l
h
79.774193 262.3811 m
83.426842 262.3811 86.3871 265.34427 86.3871 268.99857 c
86.3871 272.65286 83.426842 275.61606 79.774193 275.61606 c
76.121544 275.61606 73.161293 272.65286 73.161293 268.99857 c
73.161293 265.34427 76.121544 262.3811 79.774193 262.3811 c
h
79.774193 266.3811 m
78.331573 266.3811 77.161293 267.55252 77.161293 268.99857 c
77.161293 270.44461 78.331573 271.61606 79.774193 271.61606 c
81.21682 271.61606 82.3871 270.44461 82.3871 268.99857 c
82.3871 267.55252 81.21682 266.3811 79.774193 266.3811 c
h
W*
79.774193 264.3811 m
82.321831 264.3811 84.3871 266.44839 84.3871 268.99857 c
84.3871 271.54874 82.321831 273.61606 79.774193 273.61606 c
77.226555 273.61606 75.161293 271.54874 75.161293 268.99857 c
75.161293 266.44839 77.226555 264.3811 79.774193 264.3811 c
h
W*
0 0 235 312 rc
79.774193 264.3811 m
82.321831 264.3811 84.3871 266.44839 84.3871 268.99857 c
84.3871 271.54874 82.321831 273.61606 79.774193 273.61606 c
77.226555 273.61606 75.161293 271.54874 75.161293 268.99857 c
75.161293 266.44839 77.226555 264.3811 79.774193 264.3811 c
h
f
Q
0 0 0 sc
q
79.774193 264.3811 m
82.321831 264.3811 84.3871 266.44839 84.3871 268.99857 c
84.3871 271.54874 82.321831 273.61606 79.774193 273.61606 c
77.226555 273.61606 75.161293 271.54874 75.161293 268.99857 c
75.161293 266.44839 77.226555 264.3811 79.774193 264.3811 c
h
W*
0 0 235 312 rc
1 0 0 -1 75.161293 273.61606 cm
4.6129031 9.2349567 m
7.1605392 9.2349567 9.2258062 7.1676416 9.2258062 4.6174784 c
9.2258062 2.0673156 7.1605392 0 4.6129031 0 c
2.0652671 0 0 2.0673156 0 4.6174784 c
0 7.1676416 2.0652671 9.2349567 4.6129031 9.2349567 c
h
S
ep
end
%%Trailer
%%EOF
